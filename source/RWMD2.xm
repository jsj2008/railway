#include <Railway/Crypto/RWMD2.h>

/**
 * PI buffer
 */
const unsigned char	md2_pi_box[ 256 ] = 
{										
	0x18, 0x85, 0xbb, 0x5e, 0x94, 0x37, 0x6d, 0x10, 0xa3, 0xd9, 0x7c, 0x1f, 0x55, 0xe9, 0x8c, 0xc2,
	0x9b, 0xd1, 0x74, 0x17, 0x4d, 0xe0, 0x83, 0xb9, 0x5c, 0xef, 0x35, 0xc9, 0x6c, 0xa2, 0x45, 0xd8,
	0x1e, 0xb1, 0x54, 0x8a, 0x2d, 0x63, 0xf6, 0x99, 0xcf, 0x72, 0xa9, 0x4c, 0xdf, 0x25, 0xb8, 0x5b,
	0x91, 0x34, 0xc7, 0xfd, 0xa0, 0x43, 0x79, 0x1c, 0xaf, 0xe5, 0x89, 0x2c, 0x62, 0xf5, 0x98, 0xce,
	0x71, 0x14, 0x4a, 0xdd, 0x80, 0xb6, 0x59, 0xec, 0x32, 0xc6, 0x69, 0x9f, 0x42, 0xd5, 0x1b, 0xae,
	0x51, 0x87, 0x2a, 0xbd, 0xf3, 0x96, 0x39, 0x6f, 0xa6, 0x49, 0x7f, 0x22, 0xb5, 0xeb, 0x8e, 0x31,
	0x67, 0xfa, 0x40, 0xd3, 0x76, 0xac, 0x4f, 0xe2, 0x29, 0xbc, 0x5f, 0x95, 0x38, 0xcb, 0x6e, 0xa4,
	0x47, 0xda, 0x20, 0xb3, 0x56, 0x8c, 0x2f, 0xc3, 0xf9, 0x9c, 0x3f, 0x75, 0x18, 0xab, 0xe1, 0x84,
	0x27, 0x5d, 0xf0, 0x93, 0xc9, 0x6c, 0xff, 0x46, 0xd9, 0x7c, 0xb2, 0x55, 0xe8, 0x2e, 0xc1, 0x64,
	0x9a, 0x3d, 0xd0, 0x16, 0xa9, 0x4c, 0x83, 0x26, 0xb9, 0xef, 0x92, 0x35, 0x6b, 0xfe, 0xa1, 0xd7,
	0x7a, 0x1d, 0x53, 0x3c, 0x72, 0x15, 0x4b, 0xde, 0x24, 0xb7, 0x5a, 0x90, 0x33, 0xc6, 0xfc, 0xa0,
	0x43, 0x79, 0x1c, 0xaf, 0xe5, 0x88, 0x2b, 0x61, 0xf4, 0x97, 0xcd, 0x70, 0x13, 0x49, 0xdc, 0x23,
	0xb6, 0xc9, 0xff, 0xa2, 0xd8, 0x7b, 0x1e, 0x54, 0xe7, 0x8a, 0xc0, 0x63, 0xf6, 0x3d, 0xd0, 0x73,
	0xa9, 0x4c, 0xdf, 0x25, 0xb8, 0x5b, 0x91, 0x34, 0xc7, 0xfd, 0xa0, 0x43, 0x7a, 0x1d, 0xb0, 0xe6,
	0x89, 0x2c, 0x62, 0xf5, 0x98, 0xce, 0x71, 0x14, 0x4a, 0xdd, 0x80, 0xb6, 0x5a, 0xed, 0x33, 0xc6,
	0x69, 0x9f, 0x42, 0x51, 0x87, 0x2a, 0xbd, 0xf3, 0x97, 0x3a, 0x70, 0x13, 0xa6, 0xdc, 0x7f, 0xf8
};
			
void
RWMD2Starts( md2_ctx *ctx )
{
	memset( ctx->cksum, 0, 0x10 );
	memset( ctx->state, 0, 0x2e );
	memset( ctx->buffer, 0, 0x10 );
	ctx->left = 0;
}

/**
 * Process context
 */
void	
RWMD2Process( md2_ctx *ctx )
{
	int				i, j;
	unsigned char		t = 0;
	
	for ( i = 0; i < 16; i++ )
	{
		ctx->state[ i + 16 ] = ctx->buffer[ i ];
		ctx->state[ i + 32 ] = 
			( unsigned char )( ctx->buffer[ i ] ^ ctx->state[ i ] );
	}
	
	for ( i = 0; i < 18; i++ )
	{
		for ( j = 0; j < 48; j++ )
		{
			ctx->state[ j ] =
			   ( unsigned char )( ctx->state[ j ] ^ md2_pi_box[ t ] );
			t  = ctx->state[ j ];
		}
		
		t = ( unsigned char )( t + i );
	}
	
	t = ctx->cksum[ 15 ];
	
	for ( i = 0; i < 16; i++ )
	{
		ctx->cksum[ i ] = 
		   ( unsigned char )( ctx->cksum[ i ] ^ md2_pi_box[ ctx->buffer[ i ] ^ t ] );
        t  = ctx->cksum[i];
	}
}

/**
 * Process buffer
 */
void
RWMD2Update( md2_ctx *ctx, const unsigned char *buffer, size_t length )
{
	size_t	fill;
	
	while ( length > 0 )
	{
		if ( ( ctx->left + length ) > 16 )
			fill = 16 - ctx->left;
		else
			fill = length;
		
		memcpy( ( ctx->buffer + ctx->left ), buffer, fill );
		
		ctx->left	+= fill;
		buffer	  	+= fill;
		length	  	-= fill;
		
		if ( ctx->left == 16 )
		{
			ctx->left = 0;
			RWMD2Process( ctx );
		}
	}
}

/**
 * Finish
 */
void	
RWMD2Finish( md2_ctx *ctx, unsigned char *output )
{
	unsigned char		x;
	size_t			i;
	
	x = ( unsigned char )( 16 - ctx->left );
	
	for ( i = ctx->left; i < 16; i++ )
		  ctx->buffer[ i ] = x;
	
	RWMD2Process( ctx );
	memcpy( 	ctx->buffer,
			ctx->cksum,
			16 );
			
	RWMD2Process( ctx );
	memcpy( 	output,
			ctx->state,
			16 );
}

/**
 * free buffer
 */
void
RWMD2Free( md2_ctx *ctx )
{
	memset( ( ( unsigned char * )ctx ), 0, sizeof( md2_ctx ) );
}

